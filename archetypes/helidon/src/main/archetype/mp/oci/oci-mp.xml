<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <source src="presets.xml"/>
    <exec src="/common/common.xml"/>
    <exec src="/common/packaging.xml"/>
    <output>
        <transformation id="serverpath">
            <replace regex="^(.*)$" replacement="server/$1"/>
        </transformation>
        <transformation id="clientpath">
            <replace regex="^(.*)$" replacement="client/$1"/>
        </transformation>
        <templates engine="mustache" transformations="mustache,packaged">
            <directory>files</directory>
            <includes>
                <include>**/*.mustache</include>
            </includes>
        </templates>
        <templates engine="mustache" transformations="mustache,packaged,serverpath">
            <directory>../common/files</directory>
            <includes>
                <include>src/main/resources/**</include>
            </includes>
            <model>
                <list key="microprofile-config-entries">
                    <value template="mustache"><![CDATA[
# Application properties. This is the default greeting
app.greeting=Hello

# OCI Monitoring configuration
oci.monitoring.compartmentId=<your monitoring compartment id>
oci.monitoring.namespace=<your monitoring namespace e.g. helidon_oci>

# OCI Logging configuration
oci.logging.id=<your oci custom log id>

# OCI Authentication strategy
oci.auth-strategy=config_file,instance_principals,resource_principal
                    ]]></value>
                </list>
                <list key="yaml-config-entries">
                    <value template="mustache"><![CDATA[
# Helidon Metrics to OCI parameters
ocimetrics:
  # OCI compartment ID where the metrics will be sent
  compartmentId: <your monitoring compartment id>
  # OCI metric namespace
  namespace: <your monitoring namespace e.g. helidon_oci>
  # Delay in seconds before the 1st metrics transmission to OCI takes place.  Defaults to 1 second if not specified.
  initialDelay: 10
  # Interval in seconds between metrics transmission to OCI. Defaults to 60 seconds if not specified.
  delay: 180
  # Filter only the scopes that will be sent to OCI. This is optional and will default to all scopes if not specified.
  scopes: [base, vendor, application]
  # Enable or disable metric transmission to OCI. Defaults to true if not specified.
  enabled: true
                    ]]></value>
                </list>
                <list key="oci-logging-entries">
                    <value template="mustache"><![CDATA[
# If testing with the Unified Monitoring Agent, add java.util.logging.FileHandler in the handlers parameter and also
# set java.util.logging.FileHandler.pattern to specify the filename where the logs will be saved and where the agent
# will pull from and sent to the OCI Logging Service. For example, to save the logs in ${HOME}/helidon_log/helidon.log
# file path, set java.util.logging.FileHandler.pattern like:
# java.util.logging.FileHandler.pattern=%h/helidon_log/helidon.log
#
# Check https://docs.oracle.com/en-us/iaas/Content/Logging/Concepts/custom_logs.htm for more information on how to
# set up Custom Logs that uses the Unified monitoring agent.
                    ]]></value>
                </list>
            </model>
        </templates>
        <files transformations="clientpath">
            <directory>../common/files</directory>
            <includes>
                <include>src/main/resources/META-INF/beans.xml</include>
            </includes>
        </files>
        <files>
            <directory>files</directory>
            <includes>
                <include>server/src/main/resources</include>
                <include>spec</include>
            </includes>
        </files>
        <model>
            <value key="readme-description" file="files/README-Description.md"/>
            <value key="readme-run-commands">
                <![CDATA[
### Build the application

1. Build without running a test
   ```bash
   mvn clean package -DskipTests
   ```
2. Build with run default test profile using mocked unit tests
   ```bash
   mvn clean package
   ```
3. Build and run `test` test profile that performs authentication for OCI services via .oci config file
   ```bash
   mvn clean package -Ptest
   ```
4. Build and execute `prod` test profile that performs OCI services authentication via instance
principal when running it in an oci compute instance.
   ```bash
   mvn clean package -Pprod

### Run the application

1. Default with no profile will use `config_file,instance_principals,resource_principal` authentication strategy
     ```bash
     java -jar server/target/{{artifactId}}-server.jar
     ```
2. `test` profile will use user principal via oci config file authentication
     ```bash
     java -Dconfig.profile=test -jar server/target/{{artifactId}}-server.jar
     ```
3. `prod` profile will use instance principal authentication
     ```bash
     java -Dconfig.profile=prod -jar server/target/{{artifactId}}-server.jar
     ```
            ]]>
            </value>
            <list key="readme-exercise-the-application">
                <value template="mustache"><![CDATA[
1. Use curl to access the client application
   ```
   curl -X GET http://localhost:8080/greet
   {"message":"Hello World!","date":[2022,4,1]}

   curl -X GET http://localhost:8080/greet/Joe
   {"message":"Hello Joe!","date":[2022,4,1]}

   curl -X PUT -H "Content-Type: application/json" -d '{"greeting" : "Ola"}' http://localhost:8080/greet/greeting
   curl -X GET http://localhost:8080/greet
   {"message":"Ola World!","date":[2022,4,8]}
   ```
2. Use curl to access the health checks:
   ```
   $ curl -X GET  http://localhost:8080/health/live
   {"outcome":"UP","status":"UP","checks":[{"name":"CustomLivenessCheck","state":"UP","status":"UP","data":{"time":1646361485815}}]}
   $ curl -X GET  http://localhost:8080/health/ready
   {"outcome":"UP","status":"UP","checks":[{"name":"CustomReadinessCheck","state":"UP","status":"UP","data":{"time":1646361474774}}]}
   ```
                ]]></value>
            </list>
            <list key="k8s-readme-sections">
                <value template="mustache"><![CDATA[
### Configure the application

Make sure, your application has access to your OCI setup. One way, you can do so, if your kubernetes cluster is running locally, is by volume.

Create a volume pointing to your OCI configuration file
```yaml
      volumes:
        - name: oci-config
          hostPath:
            # directory location on host
            path: <Directory with oci config file>
```

Mount this volume as part of your application containers specification
```yaml
        volumeMounts:
        - mountPath: /home/helidon/.oci
          name: oci-config
```
                                ]]></value>
            </list>
            <list key="module-poms">
                <value>client/pom.xml</value>
                <value>server/pom.xml</value>
            </list>
            <value key="phase1-options"> -DskipOpenApiGenerate</value>
            <value key="artifact-path">server/target</value>
            <value key="artifact-name">${artifactId}-server</value>
            <list key="module-dirs">
                <value>client/src</value>
                <value>server/src</value>
                <value>spec/api.yaml</value>
            </list>
        </model>
    </output>
</archetype-script>
